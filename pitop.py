# Copyright 2015 maximumG
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
"""
Itop REST API interaction.

This module implements a simple REST API parser, intended to be used between you python script and the available Itop
REST API.
The module also implements a CSV parser that helps parse CSV generated by Itop.

For further information about the REST Itop API please visit https://wiki.openitop.org/doku.php?id=advancedtopics:rest_json
"""

import csv
import json
import re
import requests


DEFAULT_VERSION = "1.0"

class RequestorError(BaseException):
    """
    Class used to wrapped up most common REST API error comming from Itop as response to a CRUD operation.
    See the **Error codes** section of the the Itop REST API at https://wiki.openitop.org/doku.php?id=advancedtopics:rest_json

    Attributes
    ----------
    code: int
        The code number returned by any CRUD operation if it has failed.
    url: str
        The original URL that was requested.
    message: str
        The message received as response from Itop API.

    Parameters
    ----------
    code: int
        The code number returned by any CRUD operation if it has failed.
    url: str
        The original URL that was requested.
    message: str
        The message received as response from Itop API.
    """
    REQUESTOR_ERROR = {1: "UNAUTHORIZED",
                       2: "MISSING_VERSION",
                       3: "MISSING_JSON",
                       4: "INVALID_JSON",
                       10: "UNSUPPORTED_VERSION",
                       11: "UNKNOWN_OPERATION",
                       12: "UNSAFE",
                       99: "SERVER_ERROR",
                       100: "INTERNAL_ERROR"}

    def __init__(self, code, url, message):
        """
        Constructor of the RequestorError
        """
        self.status = RequestorError.REQUESTOR_ERROR.get(code, RequestorError.REQUESTOR_ERROR[99])
        self.url = url
        self.message = message

    def __str__(self):
        """
        """
        return "%s - %s : %s" %(self.status, self.url, self.message)


def request(url, username, password, object="", filter="", output_fields=[], timeout=30, itop_version=DEFAULT_VERSION):
    """
    Search for any Itop object using the REST API. The function is using the *core/get* operation of Itop.
    The function will interact with the Itop API and create dynamic python object based on Itop object returned.

    Parameters
    ----------
    url: str
        The Base URL of the Itop REST API.
    username: str
        Username to authenticate against Itop.
    password: str
        Password to authenticate against Itop.
    object: str
        The Itop object that is being requested.
    filter: str
        The filter statement to filetr out the Itop object.
    output_fields: list, optional
        A list of field that should be returned for the Itop object, default to 'all'.
    timeout: int, optional
        Time to wait to complete a request on server side, default to 30s.
    itop_version: str, optional
        The Itop version as required using any CRUD operation, default to '1.0'.

    Return
    ------
    itop_objects: list
        List of Itop Object as python object.
    """
    # Empty Itop object list
    itop_objects = []

    json_data = {"operation": "core/get", "class": object, "key": filter, "output_fieds": ",".join(output_fields)}

    payload = {"auth_user": username, "auth_pwd": password, "version": itop_version, "json_data": json.dumps(json_data)}

    # Launch a POST request using 'request' library
    try:
        response = requests.post(url, data=payload, timeout=timeout)
    except requests.exceptions.Timeout as timeout:
        raise RequestorError(99, url, "Request timeout error")

    # Getting anything than HTTP 200 raise an Exception
    if response.status_code != 200:
        raise RequestorError(99, url, response.status_code)

    json_objects = response.json()
    # Getting anything than '0' ('success') in the code keyword raise an Exception
    if json_objects["code"] != 0:
        raise RequestorError(json_objects["code"], url, json_objects["message"])

    # Dynamic creation of python object using metaclass feature, based on Itop object and returned JSON
    itop_object = type(object, (), {"__init__": factory, "__getattr__": getattr, "__str__": to_string})

    for json_object in json_objects["objects"]:
        itop_objects.append(itop_object(json_objects["objects"][json_object]["fields"]))

    return itop_objects


def factory(class_name, dict):
    """
    Creates a new class with its attribute set as the dictionary passed in argument.

    Parameters
    ----------
    dict: dict
        A dictionary where key will be the class attributes and value is the attribute's value.
    """
    class_name.__dict__ = dict

def getattr(class_name, attribute):
    """
    Magic method that will be used by the Metaclass created for Itop object.
    The function will avoid raising an exception if the atrtibute requested does not exist but rather return None.

    Parameters
    ----------
    attributes: str
        The attribute from the class that you want to retrieve the value.
    """
    return None

def to_string(class_name):
    """
    Magic method that is used by the Metaclass created for Itop object.
    """
    string = "%s : { " % type(class_name)
    for attribute, value in class_name.__dict__.iteritems():
        string += "%s : %s, " %(attribute, value)
    string += "}"
    return string


def parse_csv(file, object="", char_to_replace="(\s|\->|\-)"):
    """
    Parse an Itop CSV export file to rendered dynamic python objects.

    Parameters
    ----------
    file: str
        Full path of the CSV file to parse.
    object: str
        The Itop object's name that will be rendered as metaclass.
    char_to_replace: regex as str, optional
        Regex as string for character in the CSV file header that should be filtered.
    """
    # Regex used because Itop CSV header contains illegal character's for python variable name.
    to_be_replaced = re.compile(char_to_replace)
    # Empty Itop object list
    itop_objects = []

    itop_object = type(object, (), {"__init__": factory, "__getattr__": getattr, "__str__": to_string})

    with open(file, "rb") as csvfh:
        csv_file = csv.reader(csvfh)

        array = []
        for line in csv_file:
            array.append(line)

        header = [to_be_replaced.sub("_", value).replace("?","").lower() for value in array[0]]

        for line in array[1:]:
            itop_objects.append(itop_object(dict(zip(header, line))))

    return itop_objects

